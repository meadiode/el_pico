// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// display_frame //
// ------------- //

#define display_frame_wrap_target 0
#define display_frame_wrap 16

static const uint16_t display_frame_program_instructions[] = {
            //     .wrap_target
    0x60d0, //  0: out    isr, 16                    
    0x6050, //  1: out    y, 16                      
    0xe505, //  2: set    pins, 5                [5] 
    0xe004, //  3: set    pins, 4                    
    0xe004, //  4: set    pins, 4                    
    0xe000, //  5: set    pins, 0                    
    0xe004, //  6: set    pins, 4                    
    0xe000, //  7: set    pins, 0                    
    0xe004, //  8: set    pins, 4                    
    0xe006, //  9: set    pins, 6                    
    0xa026, // 10: mov    x, isr                     
    0x6001, // 11: out    pins, 1                    
    0xe002, // 12: set    pins, 2                    
    0xe006, // 13: set    pins, 6                    
    0x004b, // 14: jmp    x--, 11                    
    0x0084, // 15: jmp    y--, 4                     
    0xe000, // 16: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program display_frame_program = {
    .instructions = display_frame_program_instructions,
    .length = 17,
    .origin = -1,
};

static inline pio_sm_config display_frame_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + display_frame_wrap_target, offset + display_frame_wrap);
    return c;
}

#define EL_PIO_SM 0
static inline void el_program_init(PIO pio)
{
    pio_gpio_init(pio, EL_VS_PIN);
    pio_gpio_init(pio, EL_HS_PIN);
    pio_gpio_init(pio, EL_VCLK_PIN);
    pio_gpio_init(pio, EL_VID_PIN);
    pio_sm_set_consecutive_pindirs(pio, EL_PIO_SM, EL_VS_PIN, 1, true);
    pio_sm_set_consecutive_pindirs(pio, EL_PIO_SM, EL_HS_PIN, 1, true);
    pio_sm_set_consecutive_pindirs(pio, EL_PIO_SM, EL_VCLK_PIN, 1, true);
    pio_sm_set_consecutive_pindirs(pio, EL_PIO_SM, EL_VID_PIN, 1, true);
    pio_sm_config cfg;
    uint offs = pio_add_program(pio, &display_frame_program);
    cfg = display_frame_program_get_default_config(offs);
    sm_config_set_out_shift(&cfg, true, true, 32);
    sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);
    sm_config_set_out_pins(&cfg, EL_VID_PIN, 1);    
    sm_config_set_set_pins(&cfg, EL_VS_PIN, 3);    
    sm_config_set_clkdiv(&cfg, 3.0);
    pio_sm_init(pio, EL_PIO_SM, offs, &cfg);
    pio_sm_set_enabled(pio, EL_PIO_SM, true);
}

#endif

